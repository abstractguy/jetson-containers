# File:          yolo_inference/Dockerfile
# By:            Samuel Duclos
# For            Myself
# Description:   This Dockerfile installs UArmForROS.
# Build usage:   cd ${HOME}/school/Projets/Final/jetson-containers && sudo -H nvidia-docker build -t uarm -f Dockerfile .
# Run usage:     cd ${HOME}/school/Projets/Final/jetson-containers && xhost + && sudo docker run -it --rm --runtime nvidia --network host -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix -v $(pwd):/app uarm
# Notes:         Make sure you have nvidia-runtime enabled in docker config.

FROM arm64v8/ubuntu:16.04

RUN echo "Building UArm Docker image..."

# Ensure apt-get won't prompt for selecting options
ENV DEBIAN_FRONTEND=noninteractive

# Set missing environment variable needed to run Qt applications.
ENV QT_X11_NO_MITSHM 1

#RUN apt update && \
#    apt install -y --no-install-recommends bash-completion \
#                                           build-essential \
#                                           cmake \
#                                           libpython-dev \
#                                           python-dev \
#                                           python-pip \
#                                           python-setuptools \
#                                           python-wheel \
#                                           software-properties-common \
#                                           sudo \
#                                           zip && \
#    pip install --upgrade pip && \
#    pip install setuptools Cython wheel && \
#    pip cache purge && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*

RUN apt update && \
    apt install -y --no-install-recommends bash-completion \
                                           build-essential \
                                           cmake \
                                           curl \
                                           git \
                                           software-properties-common \
                                           sudo \
                                           wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add new sudo user.
#ENV USERNAME sam
#ENV HOME /home/$USERNAME
#COPY install_uarm.sh /
#RUN chmod +x /install_uarm.sh
# Replace 1000 with your user/group id.
#RUN useradd -m $USERNAME && \
#    echo "$USERNAME:$USERNAME" | chpasswd && \
#    usermod --shell /bin/bash $USERNAME && \
#    usermod -aG sudo $USERNAME && \
#    mkdir -p /etc/sudoers.d && \
#    echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
#    chmod 0440 /etc/sudoers.d/$USERNAME && \
#    usermod  --uid 1000 $USERNAME && \
#    groupmod --gid 1000 $USERNAME && \
#    gpasswd -a $USERNAME video
#
#USER $USERNAME
#WORKDIR /home/$USERNAME
#SHELL ["/bin/bash", "-c"]

# Install latest su-exec
RUN set -ex && \
    curl -o /usr/local/bin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/master/su-exec.c && \
    fetch_deps='gcc libc-dev' && \
    apt-get update && \
    apt-get install -y --no-install-recommends $fetch_deps && \
    rm -rf /var/lib/apt/lists/* && \
    gcc -Wall /usr/local/bin/su-exec.c -o/usr/local/bin/su-exec && \
    chown root:root /usr/local/bin/su-exec && \
    chmod 0755 /usr/local/bin/su-exec && \
    rm /usr/local/bin/su-exec.c && \
    apt-get purge -y --auto-remove $fetch_deps && \
    apt-get clean

ENV USERNAME sam
RUN groupadd --gid 1001 ${USERNAME}
RUN useradd -r -u 1001 -g ${USERNAME} ${USERNAME} -m -s /bin/bash
#RUN adduser --disabled-password --gecos '' ${USERNAME}
RUN adduser ${USERNAME} sudo
#RUN usermod --uid 1001 ${USERNAME}
RUN groupmod --gid 1001 ${USERNAME}
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

RUN chown root:root /usr/bin/sudo
RUN chmod 4755 /usr/bin/sudo

#USER ${USERNAME}
#ENV HOME /home/${USERNAME}
#WORKDIR /home/${USERNAME}

COPY /install_uarm.sh .

RUN chmod +x /install_uarm.sh

USER root
RUN su-exec sam:1001 /bin/bash -c "bash /install_uarm.sh"

USER ${USERNAME}
ENV HOME /home/${USERNAME}
WORKDIR /home/${USERNAME}

#USER root

#CMD ["bash"]
#CMD ["su", "-", "${USERNAME}", "-c", "/bin/bash"]
CMD ["su", "-", "sam", "-c", "/bin/bash"]
#WORKDIR /

